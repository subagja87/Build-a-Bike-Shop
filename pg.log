 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=54646
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 587) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 07:00:32 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=53788
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=51060
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp ERROR:  syntax error at or near "CREATE" at character 23
freecodecamp STATEMENT:  CREATE DATABASE bikes
	CREATE DATABASE bikes;
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 900) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 07:09:09 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=38596
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=58452
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=40350
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=40352
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='bikes';
freecodecamp LOG:  statement: CREATE DATABASE bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=42964
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='bikes';
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=35058
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: CREATE TABLE inventory();
[unknown] LOG:  connection received: host=127.0.0.1 port=59084
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
freecodecamp LOG:  statement: CREATE TABLE customers();
[unknown] LOG:  connection received: host=127.0.0.1 port=59160
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
freecodecamp LOG:  statement: CREATE TABLE customers();
freecodecamp ERROR:  relation "customers" already exists
freecodecamp STATEMENT:  CREATE TABLE customers();
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=45206
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=43856
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
freecodecamp LOG:  statement: CREATE TABLE rented();
[unknown] LOG:  connection received: host=127.0.0.1 port=41300
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=41316
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
freecodecamp ERROR:  syntax error at or near "(" at character 35
freecodecamp STATEMENT:  ALTER TABLE inventory RENAME bikes();
freecodecamp ERROR:  syntax error at or near ";" at character 35
freecodecamp STATEMENT:  ALTER TABLE inventory RENAME bikes;
freecodecamp LOG:  statement: ALTER TABLE inventory RENAME TO bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=36340
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN bike_id SERIAL PRIMARY KEY;
[unknown] LOG:  connection received: host=127.0.0.1 port=55256
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'bikes' AND c.column_name = 'bike_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'bikes' AND column_name = 'bike_id';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16386';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16386' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16386' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16386' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16386'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16386'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16386')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16386' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16386' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN type VARCHAR(50) NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=50242
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'bikes' AND column_name = 'type' AND data_type = 'character varying' AND character_maximum_length = 50;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16386';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16386' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16386' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16386' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16386'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16386'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16386')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16386' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16386' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN size INT NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=43324
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'bikes' AND column_name = 'size' AND data_type = 'integer'
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN available BOOLEAN DEFAULT 'true' NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=59234
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'bikes' AND column_name = 'available' AND data_type = 'boolean' AND column_default = 'true';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16386';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16386' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16386' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16386' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16386'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16386'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16386')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16386' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16386' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=32808
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM customers;
freecodecamp LOG:  statement: ALTER TABLE customers ADD COLUMN customer_id SERIAL PRIMARY KEY;
[unknown] LOG:  connection received: host=127.0.0.1 port=47288
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'customers' AND c.column_name = 'customer_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'customers' AND column_name = 'customer_id';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16389';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16389' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16389' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16389' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16389'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16389'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16389')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16389' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16389' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE customers ADD COLUMN phone VARCHAR(15) UNIQUE NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=47638
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'customers' AND column_name = 'phone' AND data_type = 'character varying' AND character_maximum_length = 15;
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'UNIQUE';
freecodecamp LOG:  statement: ALTER TABLE customers ADD COLUMN name VARCHAR(40) NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=38392
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'customers' AND column_name = 'name' AND data_type = 'character varying' AND character_maximum_length = 40;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16389';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16389' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16389' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16389' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16389'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16389'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16389')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16389' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16389' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rented RENAME TO rentals;
[unknown] LOG:  connection received: host=127.0.0.1 port=42946
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM rentals;
freecodecamp LOG:  statement: ALTER TABLE rented RENAME TO rentals;
freecodecamp ERROR:  relation "rented" does not exist
freecodecamp STATEMENT:  ALTER TABLE rented RENAME TO rentals;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN rental_id SERIAL PRIMARY KEY;
[unknown] LOG:  connection received: host=127.0.0.1 port=60418
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'rentals' AND c.column_name = 'rental_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'rentals' AND column_name = 'rental_id';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN customer_id INT NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=50090
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'rentals' AND column_name = 'customer_id' AND data_type = 'integer'
freecodecamp LOG:  statement: ALTER TABLE rentals ADD FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=43858
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN bike_id INT NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=33568
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'rentals' AND column_name = 'bike_id' AND data_type = 'integer'
freecodecamp LOG:  statement: ALTER TABLE rentals ADD FOREIGN KEY(bike_id) REFERENCES bikes(bike_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=42728
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN date_rented DATE DEFAULT NOW() NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=36846
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'rentals' AND column_name = 'date_rented' AND data_type = 'date' AND column_default = 'now()';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN date_returned DATE;
[unknown] LOG:  connection received: host=127.0.0.1 port=43210
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'rentals' AND column_name = 'date_returned' AND data_type = 'date';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES(Mountain, 27);
freecodecamp ERROR:  column "mountain" does not exist at character 37
freecodecamp STATEMENT:  INSERT INTO bikes(type,size) VALUES(Mountain, 27);
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Mountain', 27);
[unknown] LOG:  connection received: host=127.0.0.1 port=43578
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: SELECT * FROM bikes;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Mountain', 28);
[unknown] LOG:  connection received: host=127.0.0.1 port=50130
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=28;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Mountain', 29);
[unknown] LOG:  connection received: host=127.0.0.1 port=50172
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=29;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Road', 27);
[unknown] LOG:  connection received: host=127.0.0.1 port=58170
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Road' AND size=27;
freecodecamp LOG:  statement: SELECT * FROM bikes;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Road', 28), ('Road', 29);
[unknown] LOG:  connection received: host=127.0.0.1 port=36192
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Road' AND size=28;
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Road' AND size=29;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('BMX', 19), ('BMX', 20), ('BMX', 21);
[unknown] LOG:  connection received: host=127.0.0.1 port=56136
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='BMX' AND size=19;
postgres LOG:  statement: SELECT * FROM bikes WHERE type='BMX' AND size=20;
postgres LOG:  statement: SELECT * FROM bikes WHERE type='BMX' AND size=21;
freecodecamp LOG:  statement: SELECT * FROM bikes;
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 1979) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 08:08:50 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=57386
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=57398
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=57410
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=42036
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=36306
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 18939) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 08:40:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=51616
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=51632
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=51642
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=51644
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
[unknown] LOG:  connection received: host=127.0.0.1 port=56954
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 24271) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 08:41:38 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=34356
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=34364
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=45288
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=45300
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
[unknown] LOG:  connection received: host=127.0.0.1 port=45306
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=45316
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
[unknown] LOG:  connection received: host=127.0.0.1 port=44060
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=52198
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
freecodecamp LOG:  statement: SELECT * FROM bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=44606
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE available = true;
[unknown] LOG:  connection received: host=127.0.0.1 port=41984
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
[unknown] LOG:  connection received: host=127.0.0.1 port=49014
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=45900
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 24897) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 08:52:18 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=41146
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=41160
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=41168
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 28037) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 08:54:12 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=57112
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=57122
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=57126
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=46356
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = true WHERE type != 'BMX';
[unknown] LOG:  connection received: host=127.0.0.1 port=46728
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true AND type='BMX'
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false AND type<>'BMX'
postgres LOG:  statement: SELECT bike_id FROM bikes
[unknown] LOG:  connection received: host=127.0.0.1 port=37262
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=44912
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 28582) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 09:15:42 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=54242
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=54252
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=54256
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=40942
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=46832
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=39716
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=56886
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 1 AND available = true
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 31511) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 09:57:43 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=34644
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=34658
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=34662
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=43208
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=34788
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 7 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=42938
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = true WHERE available = false;
[unknown] LOG:  connection received: host=127.0.0.1 port=38876
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 37383) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 10:06:30 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=48654
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=48658
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=48666
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=33258
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT * FROM customers;
[unknown] LOG:  connection received: host=127.0.0.1 port=56680
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=56684
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 1 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=44888
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=44892
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO customers(name, phone) VALUES('Me', '555-5555')
[unknown] LOG:  connection received: host=127.0.0.1 port=44896
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555' AND name = 'Me'
freecodecamp LOG:  statement: SELECT * FROM customers;
freecodecamp LOG:  statement: SELECT * FROM rentals;
freecodecamp LOG:  statement: SELECT * FROM bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=50452
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=50458
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 1 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=52358
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=52368
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=52384
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(bike_id, customer_id) VALUES(1,            1)
[unknown] LOG:  connection received: host=127.0.0.1 port=52394
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id = 1 
[unknown] LOG:  connection received: host=127.0.0.1 port=52398
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
freecodecamp LOG:  statement: SELECT * FROM rentals;
freecodecamp LOG:  statement: SELECT * FROM bikes;
freecodecamp LOG:  statement: SELECT * FROM bikes ORDER BY bike_id;
[unknown] LOG:  connection received: host=127.0.0.1 port=60176
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=57474
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 2 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=57480
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=57492
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=57504
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(bike_id, customer_id) VALUES(2,            1)
[unknown] LOG:  connection received: host=127.0.0.1 port=57520
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id = 2 
[unknown] LOG:  connection received: host=127.0.0.1 port=57522
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size, type FROM bikes WHERE bike_id = 2
[unknown] LOG:  connection received: host=127.0.0.1 port=37626
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=59872
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=57590
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=35160
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 3 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=35172
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=35176
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=35192
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(bike_id, customer_id) VALUES(3,            1)
[unknown] LOG:  connection received: host=127.0.0.1 port=35196
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id = 3 
[unknown] LOG:  connection received: host=127.0.0.1 port=35204
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size, type FROM bikes WHERE bike_id = 3
[unknown] LOG:  connection received: host=127.0.0.1 port=36818
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=32898
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=32912
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 4 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=37740
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=37744
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=37748
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(bike_id, customer_id) VALUES(4,            1)
[unknown] LOG:  connection received: host=127.0.0.1 port=37758
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id = 4 
[unknown] LOG:  connection received: host=127.0.0.1 port=37770
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size, type FROM bikes WHERE bike_id = 4
[unknown] LOG:  connection received: host=127.0.0.1 port=38696
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 40031) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-02-08 11:06:24 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=47828
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=47840
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=47850
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, false);
postgres LOG:  statement: INSERT INTO public.customers VALUES (1, '555-5555', 'Me');
postgres LOG:  statement: INSERT INTO public.rentals VALUES (1, 1, 1, '2021-05-25', NULL);
postgres LOG:  statement: INSERT INTO public.rentals VALUES (2, 1, 2, '2021-05-25', NULL);
postgres LOG:  statement: INSERT INTO public.rentals VALUES (3, 1, 3, '2021-05-27', NULL);
postgres LOG:  statement: INSERT INTO public.rentals VALUES (4, 1, 4, '2021-05-27', NULL);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 4, true);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
 LOG:  received smart shutdown request
 LOG:  background worker "logical replication launcher" (PID 53716) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
